import React, { useEffect, useState } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  Alert,
  TouchableOpacity,
  Dimensions
} from 'react-native';
import { TextInput, Text, HelperText, Chip, Button, Avatar } from 'react-native-paper';
import { launchImageLibrary, launchCamera } from 'react-native-image-picker';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { COLORS } from '../../styles/colors';
import { SPACING } from '../../styles/layout';

const { width: screenWidth } = Dimensions.get('window');

const PersonalInfoForm = ({
  formData,
  onFieldChange,
  onNext,
  onBack,
  errors = {},
  validFields = {},
  validationLoading = {},
  theme = 'light'
}) => {
  const [showImageModal, setShowImageModal] = useState(false);
  const [isUsernameAutoGenerated, setIsUsernameAutoGenerated] = useState(false);

  // Username generation arrays
  const adjectives = [
    'Swift', 'Bold', 'Bright', 'Quick', 'Strong', 'Smart', 'Fast', 'Cool', 'Epic', 'Pro',
    'Elite', 'Prime', 'Super', 'Mega', 'Ultra', 'Alpha', 'Beta', 'Dynamic', 'Stellar', 'Cosmic',
    'Lightning', 'Thunder', 'Blazing', 'Frozen', 'Golden', 'Silver', 'Diamond', 'Platinum', 'Turbo', 'Nitro'
  ];
  
  const nouns = [
    'Tiger', 'Eagle', 'Wolf', 'Lion', 'Bear', 'Hawk', 'Fox', 'Shark', 'Panther', 'Falcon',
    'Runner', 'Player', 'Champion', 'Hero', 'Warrior', 'Knight', 'Master', 'Legend', 'Star', 'Ace',
    'Storm', 'Fire', 'Ice', 'Wind', 'Rock', 'Steel', 'Thunder', 'Lightning', 'Comet', 'Meteor'
  ];

  const generateUsername = () => {
    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
    const randomNumber = Math.floor(Math.random() * 999) + 1;
    return `${randomAdjective}${randomNoun}${randomNumber}`;
  };

  const regenerateUsername = () => {
    const newUsername = generateUsername();
    onFieldChange('username', newUsername);
    setIsUsernameAutoGenerated(true);
  };

  const handleInputChange = (field, value) => {
    onFieldChange(field, value);
    
    // Auto-generate username logic when email is entered
    if (field === 'email' && value && !formData.username) {
      const generatedUsername = generateUsername();
      onFieldChange('username', generatedUsername);
      setIsUsernameAutoGenerated(true);
    }
    
    // Handle username manual editing
    if (field === 'username') {
      setIsUsernameAutoGenerated(false);
    }
  };

  const handleImageUpload = () => {
    Alert.alert(
      'Select Profile Image',
      'Choose how you want to set your profile image',
      [
        {
          text: 'Camera',
          onPress: selectImageFromCamera
        },
        {
          text: 'Gallery',
          onPress: selectImageFromGallery
        },
        {
          text: 'Cancel',
          style: 'cancel'
        }
      ]
    );
  };

  const selectImageFromGallery = () => {
    const options = {
      mediaType: 'photo',
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
    };

    launchImageLibrary(options, (response) => {
      if (response.didCancel || response.error) {
        console.log('ImagePicker cancelled or error');
      } else if (response.assets && response.assets[0]) {
        onFieldChange('profileImage', response.assets[0].uri);
      }
    });
  };

  const selectImageFromCamera = () => {
    const options = {
      mediaType: 'photo',
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
    };

    launchCamera(options, (response) => {
      if (response.didCancel || response.error) {
        console.log('Camera cancelled or error');
      } else if (response.assets && response.assets[0]) {
        onFieldChange('profileImage', response.assets[0].uri);
      }
    });
  };

  const getInitials = () => {
    const first = formData.firstName?.charAt(0) || '';
    const last = formData.lastName?.charAt(0) || '';
    return (first + last).toUpperCase();
  };

  const getInputTheme = (field) => {
    const hasError = !!errors[field];
    const isValid = validFields[field];
    
    return {
      colors: {
        primary: isValid ? '#10B981' : hasError ? '#EF4444' : COLORS.primary,
        outline: isValid ? '#10B981' : hasError ? '#EF4444' : COLORS.border,
        onSurfaceVariant: COLORS.textSecondary,
        onSurface: COLORS.inputText 
      }
    };
  };

  const renderStepHeader = () => {
    const hasUserData = formData.firstName || formData.lastName;
    
    return (
      <View style={styles.stepHeader}>
        <TouchableOpacity 
          onPress={handleImageUpload} 
          style={styles.stepIconContainer}
          activeOpacity={0.7}>
          {formData.profileImage ? (
            <Avatar.Image 
              size={56} 
              source={{ uri: formData.profileImage }}
              style={styles.stepHeaderImage}
            />
          ) : hasUserData ? (
            <Avatar.Text 
              size={56} 
              label={getInitials()} 
              style={[styles.stepHeaderImage, { backgroundColor: COLORS.primary }]}
            />
          ) : (
            <Avatar.Text 
              size={56} 
              label="+" 
              style={[styles.stepHeaderImage, { backgroundColor: COLORS.primary }]}
            />
          )}
          <View style={styles.stepHeaderCameraIcon}>
            <Icon name="camera-alt" size={16} color={COLORS.surface} />
          </View>
        </TouchableOpacity>
        <Text style={styles.stepTitle}>Personal Info</Text>
        <Text style={styles.stepSubtitle}>Tell us about yourself</Text>
        <Button 
          mode="outlined" 
          onPress={handleImageUpload}
          style={styles.stepHeaderUploadButton}
          icon="image">
          Upload Profile Image
        </Button>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      {renderStepHeader()}
      
      <View style={styles.stepContainer}>
        <ScrollView 
          style={styles.stepScrollContainer} 
          contentContainerStyle={styles.stepScrollContent}
          showsVerticalScrollIndicator={false}>
          
          <View style={styles.formSection}>
            <View style={styles.nameRow}>
              <TextInput
                label="First Name *"
                value={formData.firstName}
                onChangeText={(value) => handleInputChange('firstName', value)}
                mode="outlined"
                style={[styles.input, styles.halfInput]}
                error={!!errors.firstName}
                theme={getInputTheme('firstName')}
                right={validFields.firstName && (
                  <TextInput.Icon 
                    icon="check-circle" 
                    iconColor="#10B981"
                    size={20}
                  />
                )}
              />
              <TextInput
                label="Last Name *"
                value={formData.lastName}
                onChangeText={(value) => handleInputChange('lastName', value)}
                mode="outlined"
                style={[styles.input, styles.halfInput]}
                error={!!errors.lastName}
                theme={getInputTheme('lastName')}
                right={validFields.lastName && (
                  <TextInput.Icon 
                    icon="check-circle" 
                    iconColor="#10B981"
                    size={20}
                  />
                )}
              />
            </View>
            {(errors.firstName || errors.lastName) && (
              <View style={styles.errorRow}>
                {errors.firstName && <HelperText type="error" style={styles.halfError}>{errors.firstName}</HelperText>}
                {errors.lastName && <HelperText type="error" style={styles.halfError}>{errors.lastName}</HelperText>}
              </View>
            )}

            <TextInput
              label="Email Address *"
              value={formData.email}
              onChangeText={(value) => handleInputChange('email', value)}
              mode="outlined"
              keyboardType="email-address"
              autoCapitalize="none"
              autoComplete="email"
              style={styles.input}
              placeholder="example@gmail.com"
              right={
                validationLoading.email ? (
                  <TextInput.Icon icon="loading" iconColor={COLORS.primary} />
                ) : validFields.email ? (
                  <TextInput.Icon icon="check-circle" iconColor="#10B981" size={20} />
                ) : undefined
              }
              error={!!errors.email}
              theme={getInputTheme('email')}
            />
            {errors.email && <HelperText type="error" style={styles.errorText}>{errors.email}</HelperText>}

            <TextInput
              label="Username *"
              value={formData.username}
              onChangeText={(value) => handleInputChange('username', value)}
              mode="outlined"
              autoCapitalize="none"
              style={styles.input}
              right={validFields.username && (
                <TextInput.Icon 
                  icon="check-circle" 
                  iconColor="#10B981"
                  size={20}
                />
              )}
              error={!!errors.username}
              placeholder="Auto-generated (you can edit)"
              theme={getInputTheme('username')}
            />
            {errors.username && <HelperText type="error" style={styles.errorText}>{errors.username}</HelperText>}
            
            {isUsernameAutoGenerated && (
              <View style={styles.usernameControls}>
                <Chip
                  style={styles.autoGeneratedBadge}
                  textStyle={styles.autoGeneratedBadgeText}>
                  Auto-generated
                </Chip>
                <Button
                  mode="text"
                  onPress={regenerateUsername}
                  style={styles.regenerateButton}
                  labelStyle={styles.regenerateButtonLabel}
                  icon="refresh">
                  Regenerate
                </Button>
              </View>
            )}

            <TextInput
              label="Phone Number"
              value={formData.phone}
              onChangeText={(value) => handleInputChange('phone', value)}
              mode="outlined"
              keyboardType="phone-pad"
              style={styles.input}
              placeholder="0123456789 or +254712345678"
              right={validFields.phone && (
                <TextInput.Icon 
                  icon="check-circle" 
                  iconColor="#10B981"
                  size={20}
                />
              )}
              error={!!errors.phone}
              theme={getInputTheme('phone')}
            />
            {errors.phone && <HelperText type="error" style={styles.errorText}>{errors.phone}</HelperText>}

            <TextInput
              label="Sport/Activity"
              value={formData.sport}
              onChangeText={(value) => handleInputChange('sport', value)}
              mode="outlined"
              style={styles.input}
              right={validFields.sport && (
                <TextInput.Icon 
                  icon="check-circle" 
                  iconColor="#10B981"
                  size={20}
                />
              )}
              placeholder="e.g., Football, Basketball, Running"
              theme={getInputTheme('sport')}
            />
          </View>
        </ScrollView>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.surface,
  },
  stepHeader: {
    alignItems: 'center',
    paddingVertical: SPACING.xl,
    paddingHorizontal: SPACING.lg,
  },
  stepIconContainer: {
    position: 'relative',
    marginBottom: SPACING.md,
  },
  stepHeaderImage: {
    marginBottom: SPACING.sm,
  },
  stepHeaderCameraIcon: {
    position: 'absolute',
    bottom: 4,
    right: 4,
    backgroundColor: COLORS.primary,
    borderRadius: 12,
    width: 24,
    height: 24,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 2,
    borderColor: COLORS.surface,
  },
  stepTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.text,
    marginBottom: 4,
  },
  stepSubtitle: {
    fontSize: 16,
    color: COLORS.textSecondary,
    marginBottom: SPACING.md,
  },
  stepHeaderUploadButton: {
    marginTop: SPACING.sm,
  },
  stepContainer: {
    flex: 1,
  },
  stepScrollContainer: {
    flex: 1,
  },
  stepScrollContent: {
    padding: SPACING.lg,
  },
  formSection: {
    flex: 1,
  },
  nameRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  input: {
    marginBottom: SPACING.md,
  },
  halfInput: {
    width: (screenWidth - 48) / 2 - 8,
  },
  errorRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: -SPACING.md,
    marginBottom: SPACING.md,
  },
  halfError: {
    width: (screenWidth - 48) / 2 - 8,
  },
  errorText: {
    marginTop: -SPACING.sm,
    marginBottom: SPACING.md,
  },
  usernameControls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginTop: -SPACING.sm,
    marginBottom: SPACING.md,
  },
  autoGeneratedBadge: {
    backgroundColor: '#E3F2FD',
  },
  autoGeneratedBadgeText: {
    color: '#1976D2',
    fontSize: 12,
  },
  regenerateButton: {
    marginLeft: SPACING.sm,
  },
  regenerateButtonLabel: {
    fontSize: 12,
  },
});

export default PersonalInfoForm;
