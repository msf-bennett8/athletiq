import React, { useEffect, useState, useCallback } from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  RefreshControl,
  Animated,
  Alert,
  Share,
  Platform,
} from 'react-native';
import { 
  Card,
  Button,
  Chip,
  Avatar,
  IconButton,
  FAB,
  Surface,
  Searchbar,
  ProgressBar,
  Portal,
  Modal,
  ActivityIndicator,
  Snackbar,
  Menu,
  Divider,
} from 'react-native-paper';
//import { Searchbar,
import { useRoute, useNavigation } from '@react-navigation/native';
import { useSelector, useDispatch } from 'react-redux';
import { BlurView } from '../../components/shared/BlurView';
import { LinearGradient } from '../../components/shared/BlurView';
import { LineChart, BarChart } from 'react-native-chart-kit';
import { Dimensions } from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { COLORS } from '../../styles/colors';
import { SPACING } from '../../styles/layout';
import { TEXT_STYLES } from '../../styles/typography';

const screenWidth = Dimensions.get('window').width - 40;

// Enhanced mock data with more comprehensive tracking
const getPlayerProgressData = async (playerId) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  return {
    player: {
      id: playerId,
      name: 'John Smith',
      avatar: 'https://i.pravatar.cc/150?img=1',
      position: 'Midfielder',
      level: 15,
      totalPoints: 2450,
      streak: 7,
    },
    attendance: 85,
    overallProgress: 78,
    achievements: [
      { id: 1, title: 'Speed Demon', icon: 'speed', earned: true, points: 100 },
      { id: 2, title: 'Team Player', icon: 'group', earned: true, points: 150 },
      { id: 3, title: 'Consistency King', icon: 'trending-up', earned: false, points: 200 },
    ],
    feedback: [
      { 
        date: '2025-08-15', 
        comment: 'Excellent ball control and positioning today! 🔥', 
        rating: 5,
        coach: 'Coach Martinez'
      },
      { 
        date: '2025-08-12', 
        comment: 'Good effort, work on sprint endurance 💪', 
        rating: 4,
        coach: 'Coach Martinez'
      },
      { 
        date: '2025-08-08', 
        comment: 'Great teamwork and communication! 👏', 
        rating: 5,
        coach: 'Coach Martinez'
      },
    ],
    testScores: [
      { 
        label: 'Speed (seconds)', 
        data: [5.2, 5.0, 4.8, 4.7, 4.6],
        improvement: -12.3, // negative is better for time
        target: 4.5
      },
      { 
        label: 'Endurance (minutes)', 
        data: [60, 65, 68, 70, 73],
        improvement: 21.7,
        target: 75
      },
      { 
        label: 'Ball Control (0-10)', 
        data: [6.2, 6.8, 7.1, 7.5, 7.8],
        improvement: 25.8,
        target: 8.5
      },
    ],
    weeklyStats: {
      sessionsCompleted: 4,
      totalSessions: 5,
      averageRating: 4.2,
      hoursTraining: 8.5,
    },
    nextGoals: [
      'Improve sprint speed to under 4.5s',
      'Maintain 90% attendance rate',
      'Master advanced ball control drills',
    ]
  };
};

const PlayerProgress = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const dispatch = useDispatch();
  const { player: routePlayer } = route.params;
  const userRole = useSelector(state => state.auth.userRole);
  
  const [progressData, setProgressData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedMetric, setSelectedMetric] = useState(0);
  const fadeAnim = new Animated.Value(0);
  const slideAnim = new Animated.Value(50);

  useEffect(() => {
    loadProgress();
    
    // Entrance animations
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  const loadProgress = async () => {
    try {
      const data = await getPlayerProgressData(routePlayer.id);
      setProgressData(data);
    } catch (error) {
      console.error('Failed to load progress:', error);
      Alert.alert('Error', 'Failed to load player progress. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await loadProgress();
    setRefreshing(false);
  }, []);

  const handleExportProgress = async () => {
    try {
      const message = `Progress Report for ${progressData.player.name}\n\nOverall Progress: ${progressData.overallProgress}%\nAttendance: ${progressData.attendance}%\nCurrent Streak: ${progressData.player.streak} days\n\nGenerated by CoachApp`;
      
      await Share.share({
        message,
        title: `${progressData.player.name} - Progress Report`,
      });
    } catch (error) {
      Alert.alert('Error', 'Failed to share progress report');
    }
  };

  const renderAchievementBadge = (achievement) => (
    <Surface key={achievement.id} style={[
      styles.achievementBadge,
      achievement.earned ? styles.achievementEarned : styles.achievementLocked
    ]}>
      <Icon 
        name={achievement.icon} 
        size={24} 
        color={achievement.earned ? COLORS.primary : COLORS.disabled} 
      />
      <Text style={[
        styles.achievementText,
        { color: achievement.earned ? COLORS.text : COLORS.disabled }
      ]}>
        {achievement.title}
      </Text>
      {achievement.earned && (
        <Chip style={styles.pointsChip} textStyle={{ fontSize: 10 }}>
          +{achievement.points}
        </Chip>
      )}
    </Surface>
  );

  const renderFeedbackCard = (feedback, index) => (
    <Card key={index} style={styles.feedbackCard}>
      <Card.Content>
        <View style={styles.feedbackHeader}>
          <Text style={styles.feedbackDate}>{feedback.date}</Text>
          <View style={styles.ratingContainer}>
            {[...Array(5)].map((_, i) => (
              <Icon
                key={i}
                name="star"
                size={16}
                color={i < feedback.rating ? COLORS.warning : COLORS.disabled}
              />
            ))}
          </View>
        </View>
        <Text style={styles.feedbackComment}>{feedback.comment}</Text>
        <Text style={styles.coachName}>- {feedback.coach}</Text>
      </Card.Content>
    </Card>
  );

  const renderProgressChart = () => {
    const selectedTest = progressData.testScores[selectedMetric];
    const isTimeMetric = selectedTest.label.includes('seconds');
    
    return (
      <Card style={styles.chartCard}>
        <Card.Content>
          <View style={styles.chartHeader}>
            <Text style={styles.chartTitle}>{selectedTest.label}</Text>
            <View style={[
              styles.improvementChip,
              { backgroundColor: selectedTest.improvement > 0 ? COLORS.success : COLORS.error }
            ]}>
              <Icon 
                name={isTimeMetric ? 
                  (selectedTest.improvement < 0 ? 'trending-down' : 'trending-up') :
                  (selectedTest.improvement > 0 ? 'trending-up' : 'trending-down')
                } 
                size={16} 
                color="white" 
              />
              <Text style={styles.improvementText}>
                {Math.abs(selectedTest.improvement).toFixed(1)}%
              </Text>
            </View>
          </View>
          
          <LineChart
            data={{
              labels: ['W1', 'W2', 'W3', 'W4', 'W5'],
              datasets: [
                {
                  data: selectedTest.data,
                  color: () => COLORS.primary,
                  strokeWidth: 3,
                },
                {
                  data: Array(5).fill(selectedTest.target),
                  color: () => COLORS.warning,
                  strokeWidth: 2,
                  withDots: false,
                }
              ],
            }}
            width={screenWidth - 32}
            height={220}
            chartConfig={{
              backgroundColor: 'transparent',
              backgroundGradientFrom: 'transparent',
              backgroundGradientTo: 'transparent',
              decimalPlaces: 1,
              color: (opacity = 1) => `rgba(102, 126, 234, ${opacity})`,
              labelColor: () => COLORS.text,
              style: {
                borderRadius: 16,
              },
              propsForDots: {
                r: '6',
                strokeWidth: '2',
                stroke: COLORS.primary,
                fill: COLORS.surface,
              },
            }}
            bezier
            style={styles.chart}
          />
          
          <View style={styles.legendContainer}>
            <View style={styles.legendItem}>
              <View style={[styles.legendColor, { backgroundColor: COLORS.primary }]} />
              <Text style={styles.legendText}>Current</Text>
            </View>
            <View style={styles.legendItem}>
              <View style={[styles.legendColor, { backgroundColor: COLORS.warning }]} />
              <Text style={styles.legendText}>Target</Text>
            </View>
          </View>
        </Card.Content>
      </Card>
    );
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={COLORS.primary} />
        <Text style={styles.loadingText}>Loading player progress...</Text>
      </View>
    );
  }

  if (!progressData) {
    return (
      <View style={styles.errorContainer}>
        <Icon name="error-outline" size={48} color={COLORS.error} />
        <Text style={styles.errorText}>Failed to load progress data</Text>
        <Button mode="contained" onPress={loadProgress}>
          Retry
        </Button>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        style={styles.header}
      >
        <View style={styles.playerInfo}>
          <Avatar.Image 
            source={{ uri: progressData.player.avatar }} 
            size={60}
            style={styles.avatar}
          />
          <View style={styles.playerDetails}>
            <Text style={styles.playerName}>{progressData.player.name}</Text>
            <Text style={styles.playerPosition}>{progressData.player.position}</Text>
            <View style={styles.levelContainer}>
              <Icon name="stars" size={16} color="white" />
              <Text style={styles.levelText}>Level {progressData.player.level}</Text>
              <Text style={styles.pointsText}>{progressData.player.totalPoints} pts</Text>
            </View>
          </View>
        </View>
        
        <View style={styles.streakContainer}>
          <Icon name="local-fire-department" size={24} color="orange" />
          <Text style={styles.streakText}>{progressData.player.streak} day streak</Text>
        </View>
      </LinearGradient>

      <Animated.ScrollView
        style={[
          styles.scrollView,
          {
            opacity: fadeAnim,
            transform: [{ translateY: slideAnim }],
          },
        ]}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[COLORS.primary]}
            tintColor={COLORS.primary}
          />
        }
        showsVerticalScrollIndicator={false}
      >
        {/* Overall Progress Card */}
        <Card style={styles.progressCard}>
          <Card.Content>
            <View style={styles.progressHeader}>
              <Text style={styles.sectionTitle}>Overall Progress</Text>
              <Text style={styles.progressPercentage}>{progressData.overallProgress}%</Text>
            </View>
            <ProgressBar 
              progress={progressData.overallProgress / 100} 
              color={COLORS.primary}
              style={styles.progressBar}
            />
            <View style={styles.statsRow}>
              <View style={styles.statItem}>
                <Text style={styles.statValue}>{progressData.weeklyStats.sessionsCompleted}/{progressData.weeklyStats.totalSessions}</Text>
                <Text style={styles.statLabel}>Sessions</Text>
              </View>
              <View style={styles.statItem}>
                <Text style={styles.statValue}>{progressData.attendance}%</Text>
                <Text style={styles.statLabel}>Attendance</Text>
              </View>
              <View style={styles.statItem}>
                <Text style={styles.statValue}>{progressData.weeklyStats.averageRating}/5</Text>
                <Text style={styles.statLabel}>Avg Rating</Text>
              </View>
            </View>
          </Card.Content>
        </Card>

        {/* Achievements Section */}
        <Text style={styles.sectionHeader}>Achievements 🏆</Text>
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          style={styles.achievementsScroll}
        >
          {progressData.achievements.map(renderAchievementBadge)}
        </ScrollView>

        {/* Performance Metrics */}
        <Text style={styles.sectionHeader}>Performance Metrics 📊</Text>
        <View style={styles.metricsSelector}>
          {progressData.testScores.map((test, index) => (
            <Chip
              key={index}
              selected={selectedMetric === index}
              onPress={() => setSelectedMetric(index)}
              style={[
                styles.metricChip,
                selectedMetric === index && styles.selectedMetricChip
              ]}
              textStyle={selectedMetric === index ? styles.selectedChipText : {}}
            >
              {test.label.split(' ')[0]}
            </Chip>
          ))}
        </View>
        
        {renderProgressChart()}

        {/* Goals Section */}
        <Text style={styles.sectionHeader}>Next Goals 🎯</Text>
        <Card style={styles.goalsCard}>
          <Card.Content>
            {progressData.nextGoals.map((goal, index) => (
              <View key={index} style={styles.goalItem}>
                <Icon name="radio-button-unchecked" size={20} color={COLORS.primary} />
                <Text style={styles.goalText}>{goal}</Text>
              </View>
            ))}
          </Card.Content>
        </Card>

        {/* Feedback Section */}
        <Text style={styles.sectionHeader}>Recent Feedback 💬</Text>
        {progressData.feedback.map(renderFeedbackCard)}

        <View style={{ height: 100 }} />
      </Animated.ScrollView>

      <FAB
        icon="share"
        style={styles.fab}
        onPress={handleExportProgress}
        color="white"
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  header: {
    padding: SPACING.lg,
    paddingTop: SPACING.xl * 2,
  },
  playerInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  avatar: {
    marginRight: SPACING.md,
  },
  playerDetails: {
    flex: 1,
  },
  playerName: {
    ...TEXT_STYLES.h2,
    color: 'white',
    fontWeight: 'bold',
  },
  playerPosition: {
    ...TEXT_STYLES.body,
    color: 'rgba(255, 255, 255, 0.8)',
    marginBottom: SPACING.xs,
  },
  levelContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  levelText: {
    color: 'white',
    fontWeight: '600',
    marginLeft: SPACING.xs,
  },
  pointsText: {
    color: 'rgba(255, 255, 255, 0.8)',
    marginLeft: SPACING.sm,
    fontSize: 12,
  },
  streakContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    padding: SPACING.sm,
    borderRadius: 20,
    alignSelf: 'center',
  },
  streakText: {
    color: 'white',
    fontWeight: '600',
    marginLeft: SPACING.xs,
  },
  scrollView: {
    flex: 1,
    padding: SPACING.lg,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.background,
  },
  loadingText: {
    ...TEXT_STYLES.body,
    marginTop: SPACING.md,
    color: COLORS.text,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.background,
    padding: SPACING.lg,
  },
  errorText: {
    ...TEXT_STYLES.h3,
    color: COLORS.error,
    marginVertical: SPACING.lg,
    textAlign: 'center',
  },
  progressCard: {
    marginBottom: SPACING.lg,
    backgroundColor: COLORS.surface,
    elevation: 2,
  },
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  sectionTitle: {
    ...TEXT_STYLES.h3,
    color: COLORS.text,
    fontWeight: '600',
  },
  progressPercentage: {
    ...TEXT_STYLES.h2,
    color: COLORS.primary,
    fontWeight: 'bold',
  },
  progressBar: {
    height: 8,
    borderRadius: 4,
    marginBottom: SPACING.lg,
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    ...TEXT_STYLES.h3,
    color: COLORS.primary,
    fontWeight: 'bold',
  },
  statLabel: {
    ...TEXT_STYLES.caption,
    color: COLORS.textSecondary,
    marginTop: SPACING.xs,
  },
  sectionHeader: {
    ...TEXT_STYLES.h3,
    color: COLORS.text,
    fontWeight: '600',
    marginVertical: SPACING.lg,
  },
  achievementsScroll: {
    marginBottom: SPACING.lg,
  },
  achievementBadge: {
    alignItems: 'center',
    padding: SPACING.md,
    marginRight: SPACING.md,
    borderRadius: 12,
    minWidth: 100,
    elevation: 2,
  },
  achievementEarned: {
    backgroundColor: COLORS.surface,
  },
  achievementLocked: {
    backgroundColor: COLORS.disabled + '20',
  },
  achievementText: {
    fontSize: 12,
    fontWeight: '600',
    marginTop: SPACING.xs,
    textAlign: 'center',
  },
  pointsChip: {
    backgroundColor: COLORS.success,
    marginTop: SPACING.xs,
  },
  metricsSelector: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: SPACING.md,
  },
  metricChip: {
    marginRight: SPACING.sm,
    marginBottom: SPACING.sm,
  },
  selectedMetricChip: {
    backgroundColor: COLORS.primary,
  },
  selectedChipText: {
    color: 'white',
  },
  chartCard: {
    marginBottom: SPACING.lg,
    backgroundColor: COLORS.surface,
    elevation: 2,
  },
  chartHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  chartTitle: {
    ...TEXT_STYLES.h4,
    color: COLORS.text,
    fontWeight: '600',
  },
  improvementChip: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.xs,
    borderRadius: 16,
  },
  improvementText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
    marginLeft: SPACING.xs,
  },
  chart: {
    borderRadius: 16,
    marginVertical: SPACING.md,
  },
  legendContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: SPACING.sm,
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: SPACING.md,
  },
  legendColor: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: SPACING.xs,
  },
  legendText: {
    fontSize: 12,
    color: COLORS.textSecondary,
  },
  goalsCard: {
    marginBottom: SPACING.lg,
    backgroundColor: COLORS.surface,
    elevation: 2,
  },
  goalItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  goalText: {
    ...TEXT_STYLES.body,
    color: COLORS.text,
    marginLeft: SPACING.sm,
    flex: 1,
  },
  feedbackCard: {
    marginBottom: SPACING.md,
    backgroundColor: COLORS.surface,
    elevation: 1,
  },
  feedbackHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  feedbackDate: {
    fontSize: 12,
    color: COLORS.primary,
    fontWeight: '600',
  },
  ratingContainer: {
    flexDirection: 'row',
  },
  feedbackComment: {
    ...TEXT_STYLES.body,
    color: COLORS.text,
    marginBottom: SPACING.xs,
    lineHeight: 20,
  },
  coachName: {
    fontSize: 12,
    color: COLORS.textSecondary,
    fontStyle: 'italic',
  },
  fab: {
    position: 'absolute',
    margin: 16,
    right: 0,
    bottom: 0,
    backgroundColor: COLORS.primary,
  },
});

export default PlayerProgress;